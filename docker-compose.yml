version: '3.7'

services:
  zookeeper:
    image: zookeeper:3.4.9
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - food-network
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
    depends_on:
      - zookeeper
    networks:
      - food-network
    volumes:
      - kafka_data:/bitnami/kafka

  kafbat-ui:
    container_name: kafbat-ui
    image: ghcr.io/kafbat/kafka-ui
    ports:
      - "8089:8080"
    restart: always
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - ./kafka-ui/config.yml:/etc/kafkaui/dynamic_config.yaml
    depends_on:
      - kafka
    networks:
      - food-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:8089 || exit 1
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 5s

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    restart: unless-stopped
    hostname: kafka-exporter
    container_name: kafka-exporter
    command: --kafka.server=kafka:9092 --log.level=debug
    ports:
      - "9308:9308"
    depends_on:
      - kafka
    networks:
      - food-network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - food-network

  grafana:
    image: grafana/grafana:latest
    depends_on:
      - prometheus
    ports:
      - "3001:3000"
    networks:
      - food-network
    volumes:
      - grafana-storage:/var/lib/grafana

  auth-service:
    image: auth-service:latest
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - postgres
    environment:
      - SECRET_KEY=123456ABC
      - DEBUG=True
      - ALLOWED_HOSTS=*
      - DATABASE_NAME=food_users
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
    volumes:
      - ./auth-service:/app
    networks:
      - food-network

  restaurant-service:
    image: restaurant-service:latest
    container_name: restaurant-service
    build:
      context: ./restaurant-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      - kafka
      - postgres
    environment:
      - SECRET_KEY=123456ABC
      - DEBUG=True
      - ALLOWED_HOSTS=*
      - DATABASE_NAME=food_restaurants
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
    volumes:
      - ./restaurant-service:/app
    networks:
      - food-network

  order-service:
    image: order-service:latest
    container_name: order-service
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    depends_on:
      - kafka
      - postgres
    environment:
      - SECRET_KEY=123456ABC
      - DEBUG=True
      - ALLOWED_HOSTS=*
      - DATABASE_NAME=food_orders
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
    volumes:
      - ./order-service:/app
    networks:
      - food-network

  notification-service:
    image: notification-service:latest
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    depends_on:
      - kafka
    volumes:
      - ./notification-service:/app
    networks:
      - food-network

  postgres:
    image: postgres:16
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - food-network

networks:
  food-network:
    driver: bridge

volumes:
  db-data:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
  grafana-storage: