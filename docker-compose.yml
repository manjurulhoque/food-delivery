version: '3.7'

services:
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=admin
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - food-network
    volumes:
      - es_data:/usr/share/elasticsearch/data  # Persist data

  logstash:
    image: docker.elastic.co/logstash/logstash:8.2.0
    container_name: logstash
    restart: unless-stopped
    ports:
      - "5044:5044"
    volumes:
      - ./logstash/config:/usr/share/logstash/config
    depends_on:
      - elasticsearch
    networks:
      - food-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.2.0
    container_name: kibana
    restart: unless-stopped
    environment:
      - KIBANA_SYSTEM_PASSWORD=admin
    ports:
      - "5601:5601"
    networks:
      - food-network
    depends_on:
      - elasticsearch
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z

  traefik:
    image: "traefik:v3.2"
    container_name: "traefik"
    restart: unless-stopped
    command:
      - "--api.insecure=true" # Enables Traefik dashboard
      - "--providers.docker=true" # Use Docker as a provider
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80" # HTTP traffic
      - "--accesslog=true"
      - "--accesslog.fields.names.ClientUsername=drop"
      - "--api.dashboard=true"
      - "--log.level=INFO"
      - "--metrics.prometheus=true"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.food`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.entrypoints=web"
      # define basic auth middleware for dashboard
    #      - "traefik.http.middlewares.traefik-auth.basicauth.removeheader=true"
    #      - "traefik.http.middlewares.traefik-auth.basicauth.users=admin:admin" # CHANGE PASSWORD!! (user: foobar / pwd: foobar)
    ports:
      - "8888:80" # HTTP
      - "8090:8080" # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro" # Docker socket to watch containers
    networks:
      - food-network

  zookeeper:
    image: zookeeper:3.4.9
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - food-network
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
    depends_on:
      - zookeeper
    networks:
      - food-network
    volumes:
      - kafka_data:/bitnami/kafka

  kafbat-ui:
    container_name: kafbat-ui
    image: ghcr.io/kafbat/kafka-ui
    ports:
      - "8089:8080"
    restart: always
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - ./kafka-ui/config.yml:/etc/kafkaui/dynamic_config.yaml
    depends_on:
      - kafka
    networks:
      - food-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:8089 || exit 1
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 5s

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    restart: unless-stopped
    hostname: kafka-exporter
    container_name: kafka-exporter
    command: --kafka.server=kafka:9092 --log.level=debug
    ports:
      - "9308:9308"
    depends_on:
      - kafka
    networks:
      - food-network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - food-network

  grafana:
    image: grafana/grafana:latest
    depends_on:
      - prometheus
    ports:
      - "3001:3000"
    networks:
      - food-network
    volumes:
      - grafana-storage:/var/lib/grafana

  auth-service:
    image: auth-service:latest
    container_name: auth-service
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - postgres
    environment:
      - SECRET_KEY=123456ABC
      - DEBUG=True
      - ALLOWED_HOSTS=*
      - DATABASE_NAME=food_users
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
    volumes:
      - ./auth-service:/app
    networks:
      - food-network
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.auth-service.rule=Host(`auth.food`)" # Use backticks here
      - "traefik.http.routers.auth-service.rule=PathPrefix(`/api/auth/`)"
      - "traefik.http.routers.auth-service.entrypoints=web"
      - "traefik.http.services.auth-service.loadbalancer.server.port=8000"

  restaurant-service:
    image: restaurant-service:latest
    container_name: restaurant-service
    build:
      context: ./restaurant-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      - kafka
      - postgres
    environment:
      - SECRET_KEY=123456ABC
      - DEBUG=True
      - ALLOWED_HOSTS=*
      - DATABASE_NAME=food_restaurants
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
    volumes:
      - ./restaurant-service:/app
    networks:
      - food-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.restaurant-service.rule=PathPrefix(`/api/restaurants/`)" # Use backticks here
      - "traefik.http.routers.restaurant-service.entrypoints=web"
      - "traefik.http.services.restaurant-service.loadbalancer.server.port=8001"

  order-service:
    image: order-service:latest
    container_name: order-service
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    depends_on:
      - kafka
      - postgres
    environment:
      - SECRET_KEY=123456ABC
      - DEBUG=True
      - ALLOWED_HOSTS=*
      - DATABASE_NAME=food_orders
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
    volumes:
      - ./order-service:/app
    networks:
      - food-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.order-service.rule=PathPrefix(`/api/orders/`)" # Use backticks here
      - "traefik.http.routers.order-service.entrypoints=web"
      - "traefik.http.services.order-service.loadbalancer.server.port=8002"

  notification-service:
    image: notification-service:latest
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    depends_on:
      - kafka
    volumes:
      - ./notification-service:/app
    networks:
      - food-network
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.notification-service.rule=Host(`notification.food`)" # Use backticks here
#      - "traefik.http.routers.notification-service.entrypoints=web"
#      - "traefik.http.services.notification-service.loadbalancer.server.port=8003"

  postgres:
    image: postgres:16
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - food-network

networks:
  food-network:
    driver: bridge

volumes:
  db-data:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
  grafana-storage:
  es_data: